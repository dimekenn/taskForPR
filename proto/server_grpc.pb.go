// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CRUDServiceClient is the client API for CRUDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRUDServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error)
	GetUserByUUID(ctx context.Context, in *GetUserByUUIDReq, opts ...grpc.CallOption) (*GetUserByUUIDRes, error)
	UpdateUserByUUID(ctx context.Context, in *UpdateUserByUUIDReq, opts ...grpc.CallOption) (*UpdateUserByUUIDRes, error)
}

type cRUDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCRUDServiceClient(cc grpc.ClientConnInterface) CRUDServiceClient {
	return &cRUDServiceClient{cc}
}

func (c *cRUDServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error) {
	out := new(CreateUserRes)
	err := c.cc.Invoke(ctx, "/proto.CRUDService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDServiceClient) GetUserByUUID(ctx context.Context, in *GetUserByUUIDReq, opts ...grpc.CallOption) (*GetUserByUUIDRes, error) {
	out := new(GetUserByUUIDRes)
	err := c.cc.Invoke(ctx, "/proto.CRUDService/GetUserByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDServiceClient) UpdateUserByUUID(ctx context.Context, in *UpdateUserByUUIDReq, opts ...grpc.CallOption) (*UpdateUserByUUIDRes, error) {
	out := new(UpdateUserByUUIDRes)
	err := c.cc.Invoke(ctx, "/proto.CRUDService/UpdateUserByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRUDServiceServer is the server API for CRUDService service.
// All implementations must embed UnimplementedCRUDServiceServer
// for forward compatibility
type CRUDServiceServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error)
	GetUserByUUID(context.Context, *GetUserByUUIDReq) (*GetUserByUUIDRes, error)
	UpdateUserByUUID(context.Context, *UpdateUserByUUIDReq) (*UpdateUserByUUIDRes, error)
	mustEmbedUnimplementedCRUDServiceServer()
}

// UnimplementedCRUDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCRUDServiceServer struct {
}

func (UnimplementedCRUDServiceServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCRUDServiceServer) GetUserByUUID(context.Context, *GetUserByUUIDReq) (*GetUserByUUIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUUID not implemented")
}
func (UnimplementedCRUDServiceServer) UpdateUserByUUID(context.Context, *UpdateUserByUUIDReq) (*UpdateUserByUUIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserByUUID not implemented")
}
func (UnimplementedCRUDServiceServer) mustEmbedUnimplementedCRUDServiceServer() {}

// UnsafeCRUDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRUDServiceServer will
// result in compilation errors.
type UnsafeCRUDServiceServer interface {
	mustEmbedUnimplementedCRUDServiceServer()
}

func RegisterCRUDServiceServer(s grpc.ServiceRegistrar, srv CRUDServiceServer) {
	s.RegisterService(&CRUDService_ServiceDesc, srv)
}

func _CRUDService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CRUDService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDService_GetUserByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServiceServer).GetUserByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CRUDService/GetUserByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServiceServer).GetUserByUUID(ctx, req.(*GetUserByUUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDService_UpdateUserByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserByUUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServiceServer).UpdateUserByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CRUDService/UpdateUserByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServiceServer).UpdateUserByUUID(ctx, req.(*UpdateUserByUUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CRUDService_ServiceDesc is the grpc.ServiceDesc for CRUDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRUDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CRUDService",
	HandlerType: (*CRUDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _CRUDService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserByUUID",
			Handler:    _CRUDService_GetUserByUUID_Handler,
		},
		{
			MethodName: "UpdateUserByUUID",
			Handler:    _CRUDService_UpdateUserByUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
