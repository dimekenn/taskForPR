// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	pb "taskForPr/proto"
)

// CRUDRepository is an autogenerated mock type for the CRUDRepository type
type CRUDRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *CRUDRepository) CreateUser(ctx context.Context, req *pb.CreateUserReq) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateUserReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByUUID provides a mock function with given fields: ctx, req
func (_m *CRUDRepository) GetUserByUUID(ctx context.Context, req *pb.GetUserByUUIDReq) (*pb.GetUserByUUIDRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *pb.GetUserByUUIDRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetUserByUUIDReq) *pb.GetUserByUUIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetUserByUUIDRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetUserByUUIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserByUUID provides a mock function with given fields: ctx, req
func (_m *CRUDRepository) UpdateUserByUUID(ctx context.Context, req *pb.UpdateUserByUUIDReq) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserByUUIDReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
